# window = Tk()
# window.title("OCR Kurdish")
# window.geometry("800x800")
#
# lbl = Label(window, text="Write digits with your mouse in the gray square", font=('Arial Blod', 15))
# lbl.grid(column=5, row=0)
#
# white = (255, 255, 255)
# black = (0, 0, 0)
#
# canvas_x = 200
# canvas_y = 200
#
# image = Image.new("RGB", (canvas_x, canvas_y), white)
# draw = ImageDraw.Draw(image)
# xpoints = []
# ypoints = []
# x2points = []
# y2points = []
#
# w = Canvas(window,
#                width=canvas_x,
#                height=canvas_y, bg='gray85')
# w.grid(column=5, row=2)
#
#
# def paint(event):
#     x1, y1 = (event.x - 4), (event.y - 4)
#     x2, y2 = (event.x + 4), (event.y + 4)
#     w.create_oval(x1, y1, x2, y2, fill='black')
#     xpoints.append(x1)
#     ypoints.append(y1)
#     x2points.append(x2)
#     y2points.append(y2)
#
# def imagen():
#     global counter
#     global xpoints
#     global ypoints
#     global x2points
#     global y2points
#     image1 = Image.new("RGB", (canvas_x, canvas_y), black)
#     draw = ImageDraw.Draw(image1)
#
#     elementos = len(xpoints)
#
#     for p in range(elementos):
#         x = xpoints[p]
#         y = ypoints[p]
#         x2 = x2points[p]
#         y2 = y2points[p]
#         draw.ellipse((x, y, x2, y2), 'white')
#         w.create_oval(x - 4, y - 4, x2 + 4, y2 + 4, outline='gray85', fill='gray85')
#
#
#     result = process(image1)
#     letter = result.get_letter()
#     print(letter)
#     lbl2 = Label(window, text=letter, font=('Arial Bold', 20))
#     lbl2.grid(column=5, row=10)
#
#     xpoints = []
#     ypoints = []
#     x2points = []
#     y2points = []
#
# w = Canvas(window,
#             width=canvas_x,
#             height=canvas_y, bg='gray85')
# w.grid(column=5, row=2)
#
# w1 = Canvas(window, width=200, height=200, bg='gray95')
# w1.grid(column=3, row=10)
#
# w.bind("<B1-Motion>", paint)
# button = tk.Button(window, text='Save image', width=25, command=imagen)
# button.grid(column=5, row=4)
#
#
# window.mainloop()

# CATEGORIES = ["ز", "ی", "م", "س", "د", "ا", "آ", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"]
# CATEGORIES = ["Z", "Y", "S", "D", "A", "Aa", "1", "2", "3", "4", "5", "6", "7", "8", "9"]












  # print(point)
        # distance = 0
        # newPoint = []
        # check = []
        # cp = 0
        # cn = 0
        # if len(point) > 1:
        #     for w1, w2 in point:
        #         if cp != len(point)-1:
        #             start = point[cp+1][0]
        #             # end = point[cp+1][1]
        #             distance = start - w2
        #             if distance < 22:
        #                 check.append([w1, w2])
        #             else:
        #                 if check == []:
        #                     newPoint.append([w1, w2])
        #                     cn += 1
        #                 else:
        #                     check.append([w1, w2])
        #                     startN = check[0][0]
        #                     endN = check[-1][1]
        #                     newPoint.append([startN, endN])
        #                     cn += 1
        #                     check.clear()
        #             cp += 1
        #             # print(distance)
        #             # print(newPoint)
        #         else:
        #             if cn > 0:
        #                 cn -= 1
        #                 if newPoint[cn][1] != w2 and check == []:
        #                     newPoint.append([w1, w2])
        #                     cn += 1
        #                     cp += 1
        #                 else:
        #                     newPoint.append([check[0][0], w2])
        #                     cn += 1
        #             else:
        #                 newPoint.append([check[0][0], w2])
        #                 cn += 1

                    # print(w1, ' ', w2)
                    # start = point[cp+1][0]
                    # end = point[cp+1][1]
                    # distance = start - w2
                    # if distance < 22:
                    #     if cn > 0:
                    #         startN = newPoint[cn][0]
                    #         endN = newPoint[cn][1]
                    #         print('d', distance)
                    #         print(endN)
                    #         d = endN - w1
                    #         print(d)
                    #         if d > 1:
                    #             del newPoint[cn]
                    #             newPoint.append([startN, end])
                    #             # cn -= 1
                    #         else:
                    #             newPoint.append([w1, w2])
                    #             cn += 1
                    #     else:
                    #         newPoint.append([w1, end])
                    #         cn += 1
                    # else:
                    #     if cn > 0:
                    #         endn = newPoint[cn - 1][1]
                    #         startn = newPoint[cn][1]
                    #         # print('n', startn)
                    #         # print('t', w1)
                    #         if endn != w2:
                    #             if startn > w1:
                    #                 # print("yes")
                    #                 pass
                    #             else:
                    #                 # print("yes")
                    #                 newPoint.append([w1, w2])
                    #                 cn += 1
                            # if startn < w1:
                            #     print("yes")
                            #     newPoint.append([w1, w2])
                            #     cn += 1
                            # else:
                            #     newPoint.append([w1, w2])
                            #     cn += 1

                        # else:
                        #     newPoint.append([w1, w2])
                        #     cn+1
                    # print(distance)
                # else:
                #     if newPoint[cn][1] != w2 and check == []:
                #         newPoint.append([w1, w2])
                #         cp += 1
                #     else:
                #         newPoint.append([check[0][0], w2])
                # c = 0
                # for w1, w2 in newPoint:
                #     # print(w1, ' ', w2)
                #     if c != len(newPoint)-1:
                #         start = newPoint[c + 1][0]
                #         end = newPoint[c+1][1]
                #         if start < w2:
                #             del newPoint[c]
                #     else:
                #         print(len(newPoint))
                #         start = newPoint[c - 1][0]
                #         end = newPoint[c - 1][1]
                #         if end > w1:
                #             del newPoint[c]
                #             del newPoint[c-1]
                #             newPoint.append([start, w2])
                #         print(w1)
                #     # print(end)
                #     c += 1
        # else:
        #     newPoint = point
        #
        # print(newPoint)
        # self.point_image = newPoint
        # for img in newPoint:
        #     cv2.line(image, (min(img), 0), (min(img), h), color=(255, 255, 255), thickness=1)
        #     cv2.line(image, (max(img), 0), (max(img), h), color=(255, 255, 255), thickness=1)


        # word = self.image[self.h1: self.h2, w1: w2]
        # cv2.imshow('res', vertical)
        # cv2.imshow('vertical', image)
        # cv2.imshow('word', word)
        # return image




        # if i != len(point) - 1:
    #     distance = point[i + 1][0] - point[i][1]
    #     start = point[i][0]
    #     end = point[i + 1][1]
    #     if distance < 25:
    #         if c > 0:
    #             pre = newPoint[c - 1][1]
    #             # print(pre, ' ', start)
    #             if pre > start:
    #                 # del newPoint[c-1]
    #                 newPoint.append([point[i - 1][0], end])
    #             else:
    #                 newPoint.append([start, end])
    #         else:
    #             newPoint.append([start, end])
    #         c += 1
    #     else:
    #         if c > 0:
    #             pre = newPoint[c - 1][1]
    #             # print(pre, ' ', start)
    #             if pre > start:
    #                 continue
    #             else:
    #                 newPoint.append([start, end])
    #         else:
    #             c += 1
    #             newPoint.append(point[i])


    # model = Sequential()
        #
        # model.add(Conv2D(64, (3, 3), input_shape=x.shape[1:]))
        # model.add(Activation('relu'))
        # model.add(MaxPooling2D(pool_size=(2, 2)))
        #
        # model.add(Conv2D(64, (3, 3)))
        # model.add(Activation('relu'))
        # model.add(MaxPooling2D(pool_size=(2, 2)))
        #
        # model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
        #
        # model.add(Dense(64))
        #
        # model.add(Dense(1))
        # model.add(Activation('sigmoid'))
        #
        # print(len(CATEGORIES))
        #
        # model.compile(loss='binary_crossentropy',
        #               optimizer='adam',
        #               metrics=['accuracy'])
        #
        # model.fit(x, y, batch_size=32, epochs=2, validation_split=0.9)
        #
        # model.save('cnn.model')

        # model.compile(
        #     optimizer="rmsprop",
        #     loss="sparse_categorical_crossentropy")
        # model2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        # model.save('cnn.model2')